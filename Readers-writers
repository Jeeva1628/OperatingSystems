#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

int data = 0;                 // Shared data
int readcount = 0;            // Number of readers reading
sem_t mutex, wrt;             // Semaphores

void* reader(void* arg) {
    int f = *((int*)arg);
    sem_wait(&mutex);         // Protect readcount
    readcount++;
    if(readcount == 1)        // First reader locks the resource
        sem_wait(&wrt);
    sem_post(&mutex);

    // Reading section
    printf("Reader %d: read data = %d\n", f, data);
    sleep(1);

    sem_wait(&mutex);
    readcount--;
    if(readcount == 0)        // Last reader releases the resource
        sem_post(&wrt);
    sem_post(&mutex);
    return NULL;
}

void* writer(void* arg) {
    int f = *((int*)arg);
    sem_wait(&wrt);           // Lock resource for writing

    // Writing section
    data += 1;
    printf("Writer %d: wrote data = %d\n", f, data);
    sleep(1);

    sem_post(&wrt);           // Release lock
    return NULL;
}

int main() {
    int i;
    pthread_t r[5], w[2];
    int a[5] = {1,2,3,4,5};
    int b[2] = {1,2};

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    // Create reader and writer threads
    for(i = 0; i < 5; i++)
        pthread_create(&r[i], NULL, reader, &a[i]);
    for(i = 0; i < 2; i++)
        pthread_create(&w[i], NULL, writer, &b[i]);

    // Wait for threads to finish
    for(i = 0; i < 5; i++)
        pthread_join(r[i], NULL);
    for(i = 0; i < 2; i++)
        pthread_join(w[i], NULL);

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}
