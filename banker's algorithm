#include <stdio.h>

int main() {
    int n, m, i, j;
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    int allocation[n][m], max[n][m], need[n][m], available[m];

    // Input Allocation Matrix
    printf("Enter allocation matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &allocation[i][j]);

    // Input Maximum Matrix
    printf("Enter maximum matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    // Input Available Resources
    printf("Enter available resources:\n");
    for(i = 0; i < m; i++)
        scanf("%d", &available[i]);

    // Calculate Need Matrix
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            need[i][j] = max[i][j] - allocation[i][j];

    int finish[n];
    for(i = 0; i < n; i++)
        finish[i] = 0;

    int safeSeq[n], count = 0;

    while(count < n) {
        int found = 0;
        for(i = 0; i < n; i++) {
            if(finish[i] == 0) {
                int canAllocate = 1;
                for(j = 0; j < m; j++) {
                    if(need[i][j] > available[j]) {
                        canAllocate = 0;
                        break;
                    }
                }
                if(canAllocate) {
                    for(j = 0; j < m; j++)
                        available[j] += allocation[i][j];
                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if(!found) {
            printf("System is not in a safe state.\n");
            return 0;
        }
    }

    printf("System is in a safe state.\nSafe sequence is: ");
    for(i = 0; i < n; i++)
        printf("P%d ", safeSeq[i]);
    printf("\n");

    return 0;
}
